name: Check AWS and Run Tests After Deploy

on:
  push:
    branches:
      - main

jobs:
  wait-and-check:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Obtener executionId actual antes del push
        id: previous
        run: |
          echo "Obteniendo executionId actual antes del push..."
          PREVIOUS_EXECUTION_ID=$(aws codepipeline list-pipeline-executions \
            --pipeline-name git-hub-blade \
            --max-items 1 \
            --query "pipelineExecutionSummaries[0].pipelineExecutionId" \
            --output text 2>/dev/null || echo "")
          echo "Execution ID antes del push: $PREVIOUS_EXECUTION_ID"
          echo "previous_execution_id=$PREVIOUS_EXECUTION_ID" >> "$GITHUB_OUTPUT"

      - name: Esperar nueva ejecuci√≥n generada por el push
        id: get_execution
        run: |
          PIPELINE_NAME="git-hub-blade"
          MAX_INTENTOS=20
          INTERVALO=30
          INTENTO=1
          PREVIOUS="${{ steps.previous.outputs.previous_execution_id }}"

          while [ "$INTENTO" -le "$MAX_INTENTOS" ]; do
            EXECUTION_ID=$(aws codepipeline list-pipeline-executions \
              --pipeline-name "$PIPELINE_NAME" \
              --max-items 1 \
              --query "pipelineExecutionSummaries[0].pipelineExecutionId" \
              --output text 2>/dev/null || echo "")

            echo "Intento $INTENTO/$MAX_INTENTOS..."

            if [[ "$EXECUTION_ID" != "$PREVIOUS" && "$EXECUTION_ID" != "None" && -n "$EXECUTION_ID" ]]; then
              echo "üéØ Nueva ejecuci√≥n detectada: $EXECUTION_ID"
              echo "execution_id=$EXECUTION_ID" >> "$GITHUB_OUTPUT"
              exit 0
            fi

            echo "‚è≥ A√∫n no se detecta nueva ejecuci√≥n..."
            sleep $INTERVALO
            ((INTENTO++))
          done

          echo "‚ùå No se detect√≥ una nueva ejecuci√≥n tras $((MAX_INTENTOS * INTERVALO)) segundos"
          exit 1

      - name: Esperar a que termine el deploy
        id: esperar
        run: |
          PIPELINE_NAME="git-hub-blade"
          EXECUTION_ID="${{ steps.get_execution.outputs.execution_id }}"
          MAX_INTENTOS=20
          INTERVALO=15
          INTENTO=1

          while [ "$INTENTO" -le "$MAX_INTENTOS" ]; do
            echo "üîÅ Intento $INTENTO/$MAX_INTENTOS - Esperando estado de ejecuci√≥n..."

            STATUS=$(aws codepipeline get-pipeline-execution \
              --pipeline-name "$PIPELINE_NAME" \
              --pipeline-execution-id "$EXECUTION_ID" \
              --query "pipelineExecution.status" \
              --output text 2>/dev/null || echo "Unknown")

            echo "Estado actual: $STATUS"

            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "‚úÖ Despliegue exitoso detectado"
              echo "despliegue=ok" >> "$GITHUB_OUTPUT"
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "‚ùå El despliegue fall√≥ o fue detenido"
              echo "despliegue=fail" >> "$GITHUB_OUTPUT"
              exit 1
            fi

            sleep $INTERVALO
            ((INTENTO++))
          done

          echo "‚ùå El despliegue no se complet√≥ tras $((MAX_INTENTOS * INTERVALO / 60)) minutos"
          echo "despliegue=fail" >> "$GITHUB_OUTPUT"
          exit 1

      - name: Ejecutar pruebas del 1 al 10
        if: steps.esperar.outputs.despliegue == 'ok'
        run: |
          echo "‚úÖ Ejecutando pruebas post-deploy:"
          for i in {1..10}; do
            echo "‚úîÔ∏è Prueba $i"
          done
          ls -la
