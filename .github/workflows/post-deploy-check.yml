name: Check AWS and Run Tests After Deploy

on:
  push:
    branches:
      - main

jobs:
  wait-and-check:
    runs-on: ubuntu-latest

    steps:
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Esperar ejecuci√≥n del pipeline y monitorear su estado
        id: esperar
        run: |
          PIPELINE_NAME="git-hub-blade"
          REGION="us-east-2"
          MAX_INTENTOS=20
          INTERVALO=30
          INTENTO=1

          echo "üîé Obteniendo executionId actual antes del push..."
          EXECUTION_ANTES=$(aws codepipeline list-pipeline-executions \
            --pipeline-name "$PIPELINE_NAME" \
            --max-items 1 \
            --region "$REGION" \
            --query "pipelineExecutionSummaries[0].pipelineExecutionId" \
            --output text)

          echo "Execution ID antes del push: $EXECUTION_ANTES"

          NUEVO_EXECUTION_ID=""

          echo "‚è≥ Esperando nueva ejecuci√≥n generada por este push..."
          while [ "$INTENTO" -le "$MAX_INTENTOS" ]; do
            ACTUAL=$(aws codepipeline list-pipeline-executions \
              --pipeline-name "$PIPELINE_NAME" \
              --max-items 1 \
              --region "$REGION" \
              --query "pipelineExecutionSummaries[0].pipelineExecutionId" \
              --output text)

            if [[ "$ACTUAL" != "$EXECUTION_ANTES" && "$ACTUAL" != "None" && "$ACTUAL" != "" ]]; then
              echo "‚úÖ Nueva ejecuci√≥n detectada: $ACTUAL"
              NUEVO_EXECUTION_ID=$ACTUAL
              break
            fi

            echo "‚è≥ Intento $INTENTO/$MAX_INTENTOS: a√∫n no se detecta nueva ejecuci√≥n..."
            sleep $INTERVALO
            ((INTENTO++))
          done

          if [ -z "$NUEVO_EXECUTION_ID" ]; then
            echo "‚ùå No se detect√≥ nueva ejecuci√≥n del pipeline tras $((MAX_INTENTOS * INTERVALO)) segundos."
            echo "despliegue=fail" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "üîÑ Esperando que finalice la ejecuci√≥n $NUEVO_EXECUTION_ID..."

          INTENTO=1
          while [ "$INTENTO" -le "$MAX_INTENTOS" ]; do
            STATUS=$(aws codepipeline get-pipeline-execution \
              --pipeline-name "$PIPELINE_NAME" \
              --pipeline-execution-id "$NUEVO_EXECUTION_ID" \
              --region "$REGION" \
              --query "pipelineExecution.status" \
              --output text)

            echo "Intento $INTENTO: Estado actual = $STATUS"

            if [[ "$STATUS" == "Succeeded" ]]; then
              echo "‚úÖ Despliegue exitoso detectado"
              echo "despliegue=ok" >> "$GITHUB_OUTPUT"
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Stopped" ]]; then
              echo "‚ùå El despliegue fall√≥ o fue detenido"
              echo "despliegue=fail" >> "$GITHUB_OUTPUT"
              exit 1
            fi

            sleep $INTERVALO
            ((INTENTO++))
          done

          echo "‚ùå El despliegue no se complet√≥ tras $((MAX_INTENTOS * INTERVALO)) segundos"
          echo "despliegue=fail" >> "$GITHUB_OUTPUT"
          exit 1

      - name: Ejecutar pruebas post-deploy
        if: steps.esperar.outputs.despliegue == 'ok'
        run: |
          echo "‚úÖ Ejecutando pruebas post-deploy:"
          for i in {1..10}; do
            echo "‚úîÔ∏è Prueba $i"
          done
          ls -la
